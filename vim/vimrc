" Pathogen to autoload plugins in /etc/vim/bundle and ~/.vim/bundle
source /etc/vim/pathogen/autoload/pathogen.vim
execute pathogen#infect('bundle/{}', '/etc/vim/bundle/{}')
filetype plugin indent on

set modeline

"Syntastic Defaults
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_puppet_checkers=['puppet', 'puppetlint']
let g:syntastic_puppet_puppetlint_args = '--no-autoloader_layout-check --no-documentation-check --no-80chars-check --no-class_inherits_from_params_class-check'
let g:syntastic_enable_perl_checker = 1
let g:syntastic_perl_checkers=['perlcritic']
let g:syntastic_perl_perlcritic_args = '-4'
let g:syntastic_python_checkers = ['pylint']

" NERDTree
let NERDTreeShowHidden=1
map <C-n> :NERDTreeToggle<CR>
"autocmd vimenter * NERDTree
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Commands
command Q qa!
command W wa!
command -nargs=1 E tabedit <args>

" Map <C-L> (redraw screen) to also turn off search highlighting until the next search
nnoremap <C-L> :nohl<CR><C-L>

" Set <Tab> to navigate tabs
map <Tab> :tabn<cr>
let g:airline#extensions#tabline#enabled = 1

" Set <F2> for paste mode toggle
set pastetoggle=<F2>

" Set <F3> for line number toggle
nnoremap <F3> :set number!<CR>

" Set <F8> to run puppet-lint
function Formatting()
    normal! gg=G
    if &ft =~ "puppet"
        "normal! gg=G
        g/=>/Tabularize/=>/
        nohlsearch
        "/.*\".*"\.*\&\(.*\$\)\@!.*/s/\"/\'/g
        " Fix double quoted strings containing no variables
        "g/.*\".*"\.*\&\(.*\$\)\@!.*/ s/\"/\'/g
        "nohlsearch
        " Fix double quoted strings containing only variable
        "g/.*=>.\"\$\:*\w*\".*/s/\"//g
        " Fix remaining double quoted strings where
        " variable not enclosed in {}
        "g/.*=>.\".*\".*/ s/\$\(\w*\)/\$\{\1\}/g
        "nohlsearch
        "write
    endif
    nohlsearch
    write
endfunction
nnoremap <F8> :call Formatting()<CR>


" load filetype defaults and custom templates
if has("autocmd")
    autocmd!
    " remove auto comment on newline or enter command
    autocmd bufnewfile,bufreadpre,bufread,bufreadpost * exe "set formatoptions-=cro"
    " puppet
    autocmd bufread,bufnewfile *.pp set filetype=puppet
    autocmd bufnewfile *.pp 0r /etc/vim/templates/template.pp
    autocmd bufnewfile *.pp exe "g/filename/s//" .expand("%:t")
    autocmd bufnewfile *.pp exe "g/classname/s//" .expand("%:t:r")
    " perl
    autocmd bufnewfile *.pl 0r /etc/vim/templates/template.pl
    autocmd bufnewfile *.pl exe "g/filename/s//" .expand("%:t")
    " python
    autocmd bufnewfile *.py 0r /etc/vim/templates/template.py
    "autocmd bufnewfile *.py exe "g/filename/s//" .expand("%:t")
    autocmd FileType puppet set tabstop=4 expandtab shiftwidth=4 softtabstop=4
    autocmd FileType vim set tabstop=4 expandtab shiftwidth=4 softtabstop=4
    autocmd FileType ruby set tabstop=2 expandtab shiftwidth=2 softtabstop=2
    autocmd FileType perl set tabstop=5 expandtab shiftwidth=5 softtabstop=5
endif

" change title of terminal window to active filename
set title

" alwaays display lower status line
set laststatus=2
set statusline=%f[%{strlen(&fenc)?&fenc:'none'},%{&ff}]%h%m%r%y%=%c,%l/%l\ %p

" always display the tabline
set showtabline=2

" replace tabs with spaces
set expandtab

" do not return cursor to start of line
set nostartofline

" colors
"colorscheme solarized
colorscheme koehler
let g:airline_powerline_fonts = 1

" no line wrap
set nowrap

" syntax checking on
syntax on

" use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" display white space with a char
set list

" set listchars=trail:.
set listchars=tab:>.,trail:.,extends:#,nbsp:.

" always display rule
set ruler

" always display line numbers
"set number
set numberwidth=4

